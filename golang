# Go 代码最佳实践 Checklist

## 架构设计与可维护性
- [ ] 是否使用了 Functional Options 模式提升可扩展性？
- [ ] 接口是否足够小，职责单一？
- [ ] 是否避免了为了 mock 而引入多余的接口？
- [ ] 包和 struct 是否单一职责清晰？
- [ ] 是否优先使用组合而非继承？
- [ ] 是否通过 constructor 初始化对象并设定默认值？
- [ ] 是否通过标准接口（如 io.Writer）进行依赖抽象？
- [ ] 是否使用 internal 限制了内部逻辑访问范围？

## 错误处理
- [ ] 错误信息是否有足够上下文可定位？
- [ ] 是否使用 `%w` 正确包装底层错误？
- [ ] 是否有统一的错误类型或常量？
- [ ] 是否滥用了 panic（是否该返回 error）？

## 并发与资源管理
- [ ] 是否所有阻塞操作都支持 context？
- [ ] 是否防止了 goroutine 泄露（退出机制）？
- [ ] 是否避免了数据竞争？是否运行过 `-race`？

## 可测试性
- [ ] 是否便于单元测试（依赖注入、结构清晰）？
- [ ] 是否覆盖了边界条件与异常路径？
- [ ] 是否使用了表驱动测试？

## 风格与工具
- [ ] 是否使用 gofmt/goimports 保持一致风格？
- [ ] 是否启用了 lint 工具（golangci-lint、govet 等）？
- [ ] 是否使用结构化日志库而非 fmt.Println？

## 通用
- [ ] 是否优先使用标准库？
- [ ] 是否遵循最小惊讶原则？
- [ ] 是否避免了过度设计和过早优化？
